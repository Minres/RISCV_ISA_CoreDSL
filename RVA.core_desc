import "RISCVBase.core_desc"

InstructionSet RVA extends RISCVBase {
    instructions {
        LRW {
            encoding: 5'b00010 :: aq[0:0] :: rl[0:0]  :: 5'b00000 :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(aq)}, {name(rl)}";
            behavior: if ((rd % RFS) != 0) {
                unsigned<XLEN> offs = X[rs1 % RFS];
                X[rd % RFS] = (unsigned<XLEN>)((signed)MEM[offs+3:offs]);
                RES[offs] = (unsigned<8>)-1;
            }
        }

        SCW {
            encoding: 5'b00011 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<32> res1 = RES[offs];
                if (res1 != 0)
                    MEM[offs+3:offs] = (unsigned<32>)X[rs2 % RFS];
                if ((rd % RFS) != 0)
                    X[rd % RFS] = res1 ? 0 : 1;
            }
        }

        AMOSWAPW {
            encoding: 5'b00001 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoswap.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                if ((rd % RFS) != 0) X[rd % RFS] = (unsigned<XLEN>)((signed)MEM[offs+3:offs]);
                MEM[offs+3:offs] = (unsigned<32>)X[rs2 % RFS];
            }
        }

        AMOADDW {
            encoding: 5'b00000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoadd.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                signed<32> res1 = (signed)MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = (unsigned<XLEN>)res1;
                signed<34> res2 = res1 + (signed<32>)X[rs2 % RFS];
                MEM[offs+3:offs] = (unsigned<32>)res2;
            }
        }

        AMOXORW {
            encoding: 5'b00100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoxor.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<32> res1 = MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = res1;
                unsigned<32> res2 = res1 ^ (unsigned<32>)X[rs2 % RFS];
                MEM[offs+3:offs] = res2;
            }
        }

        AMOANDW {
            encoding: 5'b01100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoand.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<32> res1 = MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = res1;
                unsigned<32> res2 = res1 & (unsigned<32>)X[rs2 % RFS];
                MEM[offs+3:offs] = res2;
            }
        }

        AMOORW {
            encoding: 5'b01000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoor.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<32> res1 = MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = res1;
                unsigned<32> res2 = res1 | (unsigned<32>)X[rs2 % RFS];
                MEM[offs+3:offs] = res2;
            }
        }

        AMOMINW {
            encoding: 5'b10000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amomin.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                signed<32> res1 = (signed)MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = (unsigned<XLEN>)res1;
                unsigned<32> res2 = res1 > (signed<32>)X[rs2 % RFS] ? (unsigned<32>)X[rs2 % RFS] : (unsigned)res1;
                MEM[offs+3:offs] = res2;
            }
        }

        AMOMAXW {
            encoding: 5'b10100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amomax.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                signed<32> res1 = (signed)MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = (unsigned<XLEN>)res1;
                unsigned<32> res2 = res1 < (signed<32>)X[rs2 % RFS] ? (unsigned<32>)X[rs2 % RFS] : (unsigned)res1;
                MEM[offs+3:offs] = res2;
            }
        }

        AMOMINUW {
            encoding: 5'b11000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amominu.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<32> res1 = MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = (unsigned<XLEN>)res1;
                unsigned<32> res2 = res1 > (unsigned<32>)X[rs2 % RFS] ? (unsigned<32>)X[rs2 % RFS] : res1;
                MEM[offs+3:offs] = res2;
            }
        }

        AMOMAXUW {
            encoding: 5'b11100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: {"amomaxu.w", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<32> res1 = MEM[offs+3:offs];
                if ((rd % RFS) != 0) X[rd % RFS] = (unsigned<XLEN>)res1;
                unsigned<32> res2 = res1 < (unsigned<32>)X[rs2 % RFS] ? (unsigned<32>)X[rs2 % RFS] : res1;
                MEM[offs+3:offs] = res2;
            }
        }

        LRD [[enable=XLEN==64]] {
            encoding: 5'b00010 :: aq[0:0] :: rl[0:0]  :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}";
            behavior: if ((rd % RFS) != 0) {
                unsigned<XLEN> offs = X[rs1 % RFS];
                X[rd % RFS] = (unsigned <XLEN>)((signed)MEM[offs+7:offs]);
            	RES[offs] = (unsigned<8>)-1;
            }
        }

        SCD [[enable=XLEN==64]] {
            encoding: 5'b00011 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = RES[offs];
                if (res != 0)
                    MEM[offs+7:offs] = X[rs2 % RFS];
                if ((rd % RFS) != 0)
                    X[rd % RFS] = res ? 0 : 1;
            }
        }

        AMOSWAPD [[enable=XLEN==64]] {
            encoding: 5'b00001 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoswap.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                if ((rd % RFS) != 0)
                 	X[rd % RFS] = (unsigned<XLEN>)((signed)MEM[offs+7:offs]);
                MEM[offs+7:offs] = (unsigned<64>)X[rs2 % RFS];
            }
        }

        AMOADDD [[enable=XLEN==64]] {
            encoding: 5'b00000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoadd.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res;
                MEM[offs+7:offs] = (unsigned<64>)(res + X[rs2 % RFS]);
            }
        }

        AMOXORD [[enable=XLEN==64]] {
            encoding: 5'b00100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoxor.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res;
                unsigned<64> res2 = res ^ X[rs2 % RFS];
                MEM[offs+7:offs] = res2;
            }
        }

        AMOANDD [[enable=XLEN==64]] {
            encoding: 5'b01100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoand.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res;
                unsigned<64> res2 = res & X[rs2 % RFS];
                MEM[offs+7:offs] = res2;
            }
        }

        AMOORD [[enable=XLEN==64]] {
            encoding: 5'b01000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amoor.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res;
                unsigned<64> res2 = res | X[rs2 % RFS];
                MEM[offs+7:offs] = res2;
            }
        }

        AMOMIND [[enable=XLEN==64]] {
            encoding: 5'b10000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amomin.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res1 = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res1;
                unsigned<64> res2 = res1 > (signed<64>)X[rs2 % RFS] ? X[rs2 % RFS] : res1;
                MEM[offs+7:offs] = res2;
            }
        }

        AMOMAXD [[enable=XLEN==64]] {
            encoding: 5'b10100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amomax.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res;
                unsigned<64> res2 = res < (signed<64>)X[rs2 % RFS] ? X[rs2 % RFS] : res;
                MEM[offs+7:offs] = res2;
            }
        }

        AMOMINUD [[enable=XLEN==64]] {
            encoding: 5'b11000 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amominu.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res;
                unsigned<64> res2 = res > X[rs2 % RFS] ? X[rs2 % RFS] : res;
                MEM[offs+7:offs] = res2;
            }
        }

        AMOMAXUD [[enable=XLEN==64]] {
            encoding: 5'b11100 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: {"amomaxu.d", "{name(rd)}, {name(rs1)}, {name(rs2)} (aqu = {aq},rel = {rl})"};
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                unsigned<64> res1 = MEM[offs+7:offs];
                if ((rd % RFS) != 0)
                	X[rd % RFS] = (unsigned<XLEN>)(signed)res1;
                unsigned<64> res2 = res1 < X[rs2 % RFS] ? (unsigned<64>)X[rs2 % RFS] : res1;
                MEM[offs+7:offs] = res2;
            }
        }
    }
}
